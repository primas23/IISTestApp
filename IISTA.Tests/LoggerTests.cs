using System.IO;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using IISTA.Loger;
using ILogger = IISTA.Common.Contracts.ILogger;

namespace IISTA.Tests
{
    [TestClass]
    public class LoggerTests
    {
        [TestMethod]
        public void LoggerShouldCreateTextFileWenLogs()
        {
            string fileName = "LoggerForUnitTest.txt";

            ILogger logger = new FileLogger(fileName);

            string path = logger.Path;

            if (File.Exists(logger.Path))
            {
                File.Delete(path);
            }

            logger.WriteLine("Test");

            bool wasCreated = File.Exists(logger.Path);

            if (wasCreated)
            {
                File.Delete(path);
            }

            Assert.IsTrue(wasCreated);
        }

        [TestMethod]
        public void LoggerShouldLogCurrentTextWhenLogs()
        {
            string fileName = "LoggerForUnitTest.txt";
            string message = "This line is generated by the uit test";

            ILogger logger = new FileLogger(fileName);
            logger.WriteLine(message);

            string path = logger.Path;

            string[] lines = File.ReadAllLines(path);
            bool isLoggedLineInFile = false;

            foreach (string line in lines)
            {
                if (line.IndexOf(message) != -1)
                {
                    isLoggedLineInFile = true;
                }
            }

            DeleteFileIfItWasCreated(logger);

            Assert.IsTrue(isLoggedLineInFile);
        }

        [TestMethod]
        public void LoogerShouldLogTextOnNewLine()
        {
            string fileName = "LoggerForUnitTest.txt";
            string message = "This line is generated by the uit test";
            string secondMessage = "This should be on the next line";

            ILogger logger = new FileLogger(fileName);

            logger.WriteLine(message);
            logger.WriteLine(secondMessage);

            string path = logger.Path;

            string[] lines = File.ReadAllLines(path);

            bool isSecondMessageOnNewLne = false;

            foreach (string line in lines)
            {
                if (line.IndexOf(secondMessage) != -1)
                {
                    isSecondMessageOnNewLne = line.IndexOf(message) == -1;
                }
            }

            DeleteFileIfItWasCreated(logger);

            Assert.IsTrue(isSecondMessageOnNewLne);
        }

        [TestMethod]
        public void LoogerShouldLogTextOnSameLine()
        {
            string fileName = "LoggerForUnitTest.txt";
            string message = "This line is generated by the uit test";
            string secondMessage = " This should be on the same line";

            ILogger logger = new FileLogger(fileName);

            logger.Write(message);
            logger.Write(secondMessage);

            string path = logger.Path;

            string[] lines = File.ReadAllLines(path);

            bool isSecondMessageOnSameLine = false;

            foreach (string line in lines)
            {
                if (line.IndexOf(message) != -1)
                {
                    isSecondMessageOnSameLine = line.IndexOf(secondMessage) != -1;
                }
            }

            DeleteFileIfItWasCreated(logger);

            Assert.IsTrue(isSecondMessageOnSameLine);
        }

        #region Private Helper Methods

        private static void DeleteFileIfItWasCreated(ILogger logger)
        {
            bool wasCreated = File.Exists(logger.Path);

            if (wasCreated)
            {
                File.Delete(logger.Path);
            }
        } 

        #endregion
    }
}
